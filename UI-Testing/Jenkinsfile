pipeline {
    agent any
    
    parameters {
        choice (choices: ["dev", "qa"], description: "Wich environment to test", name: "environment" )
        string(defaultValue: "regression", description: "Test tags to execute", name: "tag" )
    }
    
    environment{
        def imageName = "python-ui-testing"
        def containerName = "python-ui-testing-${env.BUILD_NUMBER}"
    }
    
    stages {
        
        stage("Clean Up"){
            steps {
                deleteDir()
            }
        }
        
        stage("Clone Repository"){
            steps {
                sh "git clone https://github.com/gorilla-leo/pytest-learning-lab.git"
            }
        }

        stage("Build Image"){
            steps {
                dir('pytest-learning-lab/UI-Testing'){
                    sh "docker build -t ${imageName} ."
                }
            }
        }
        
        stage("Execute Tests"){
            steps {
                dir('pytest-learning-lab/UI-Testing'){
                    sh "docker run -d --name ${containerName} ${imageName}"
                    
                    script{
                        if(params.tag == "regression"){
                            sh "docker exec -i ${containerName}  pytest --alluredir=\"report\"  --env=${params.environment} --headless=Y"
                        }else{
                            sh "docker exec -i ${containerName}  pytest --alluredir=\"report\"  -m ${params.tag} --env=${params.environment} --headless=Y"
                        }
                    }
                }
            }
        }
     }
    post {
        always {
            sh "rm -rf report; mkdir report"
            sh "docker cp ${containerName}:/python-ui-testing/report/ ./report"
            echo "Cleanup"
            sh "docker stop ${containerName}"
            sh "docker rm ${containerName}"

            script {
                allure([
                        includeProperties: false,
                        jdk: '',
                        properties: [],
                        reportBuildPolicy: 'ALWAYS',
                        results: [[path: '**/report']]
                ])
            }   
        }
    }
}